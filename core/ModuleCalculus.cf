-- A labelled BNFC grammar (to be processed with BNFC)
-- describing a core of Agda that is supposed to capture
-- the essential features of the module system.

-- A program is a list of declarations.

Prg.  Prg ::= [Decl] ;

-- Declarations.
--
-- Similar to Agda declarations, but
-- * not sensitive to indentation, thus, braces needed for blocks
-- * modifiers are not applied to blocks but to individual definitions.

Module.  Decl ::= Mod "module" Ident [Bind] Refine "where" "{" [Decl] "}" ; -- A new parameterized module with content.
Spec.    Decl ::= Mod "module" Ident "=" QName [Inst] [Dir] ; -- A specialization of a module.
Open.    Decl ::= "open" Ident Mod                          ; -- Importing names.  Their status is given by the modifier.
Decl.    Decl ::= Mod Ident ":" Exp                         ; -- Declaration of symbol with visibility given by modifier.
Def.     Decl ::= "def" Ident "=" Exp                       ; -- Definition of symbol.

terminator Decl "" ;

-- Qualified identifiers: non-empty lists of identifiers.
-- Should not allow spaces around the ".", but this is not easily expressed in BNFC.

QName.   QName ::= Ident          ;  -- Last identifier (unqualified).
Qual.    QName ::= Ident "." QName ;  -- Qualification.

-- Modifiers: public / private / system
-- "system" names are system-generated to resolve syntactic sugar.
-- They may never appear in a print-out.
-- They are not to be named (Voldemort names).

Public.   Mod ::= "public"  ;  -- A name exported by the module.
Private.  Mod ::= "private" ;  -- A name only known in the module and its submodules.
System.   Mod ::= "system"  ;  -- A private name generated by the system.

-- Directives.
-- The absense of a "using"-directive means use everything (taking account the given "renaming").
-- To not import anything, use "using ()"

Using.    Dir ::= "using" "(" [Ident] ")"  ; -- Import the given names.
Renaming. Dir ::= "renaming" "(" [Ren] ")" ; -- Import the given names 1 using the given names 2.

Ren.      Ren ::= Ident "to" Ident         ; -- Rename name 1 to name 2.

separator  Ident ";" ;  -- Separate identifiers by semicolons.
separator  Ren   ";" ;  -- Separate renamings by semicolons.
terminator Dir   ""  ;  -- Lists of directive, whitespace separated.

-- Bindings.
-- Telescopes are lists of bindings [Bind].

Bind.     Bind ::= "(" Ident ":" Exp ")" ; -- Typed binding

terminator Bind "" ;

-- Refinement of parent module parameters.

NoRefine. Refine ::=                      ; -- No refinement given.
Refine.   Refine ::= "refine" [Subst]     ; -- Refine by a substitution.
Subst.    Subst ::= "(" Ident "=" Exp ")" ; -- Assignment of module parameter.

terminator Subst "" ;

-- Parameter instantiations: lists of atomic expressions.

Inst.     Inst ::= Exp2; -- Atomic expression.

terminator Inst "" ;

-- NoInsts.    Insts ::= ;
-- Insts.      Insts ::= Inst Insts ;

-- Expressions: Just the dependently typed lambda calculus

EId.   Exp2 ::= QName                     ; -- variable or defined name
EUniv. Exp2 ::= "Set"                     ; -- Universe of types
EApp.  Exp1 ::= Exp1 Exp2                 ; -- Application, left associative
EPi.   Exp  ::= "forall" [Bind] "->" Exp  ; -- Function types
ELam.  Exp  ::= "\\" Ident "->" Exp       ; -- Lambda-abstraction

coercions Exp 2 ;

-- Comments.

comment "--"      ;  -- line comment
comment "{-" "-}" ;  --  non-nested block comment

-- EOF
