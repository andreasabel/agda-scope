-- Agda bindings for the Haskell abstract syntax data types.
-- Generated by BNFC.

module HierMod.AST where

open import Agda.Builtin.Char using () renaming (Char to Char)
open import Agda.Builtin.Float public using () renaming (Float to Double)
open import Agda.Builtin.Int   public using () renaming (Int to Integer)
open import Agda.Builtin.List using () renaming (List to #List)
open import Agda.Builtin.String using () renaming
  ( String to #String
  ; primStringFromList to #stringFromList
  )

{-# FOREIGN GHC import qualified Data.Text #-}
{-# FOREIGN GHC import HierMod.Abs #-}
{-# FOREIGN GHC import HierMod.Print (printTree) #-}

data Name : Set where
  name : #List Char → Name

{-# COMPILE GHC Name = data Name (Name) #-}

mutual

  data Program : Set where
    prg : (x : Name) (d : Decls) → Program

  {-# COMPILE GHC Program = data Program (Prg) #-}

  data Decl : Set where
    modl : (x : Name) (d : Decls) → Decl
    ref : (q : QName) → Decl

  {-# COMPILE GHC Decl = data Decl
    ( Modl
    | Ref
    ) #-}

  data Decls : Set where
    dNil : Decls
    dSnoc : (d₁ : Decls) (d₂ : Decl) → Decls

  {-# COMPILE GHC Decls = data Decls
    ( DNil
    | DSnoc
    ) #-}

  data QName : Set where
    qName : (x : Name) → QName
    qual : (x : Name) (q : QName) → QName

  {-# COMPILE GHC QName = data QName
    ( QName
    | Qual
    ) #-}

-- Binding the pretty printers.

postulate
  printProgram : Program → #String
  printDecl : Decl → #String
  printDecls : Decls → #String
  printQName : QName → #String

{-# COMPILE GHC printProgram = \ p -> Data.Text.pack (printTree (p :: Program)) #-}
{-# COMPILE GHC printDecl = \ d -> Data.Text.pack (printTree (d :: Decl)) #-}
{-# COMPILE GHC printDecls = \ d -> Data.Text.pack (printTree (d :: Decls)) #-}
{-# COMPILE GHC printQName = \ q -> Data.Text.pack (printTree (q :: QName)) #-}