{-# LANGUAGE CPP #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE LambdaCase #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif

{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}

-- | Pretty-printer for HierMod.
--   Generated by the BNF converter.

module HierMod.Print where

import Prelude
  ( ($), (.)
  , Bool(..), (==), (<)
  , Int, Integer, Double, (+), (-), (*)
  , String, (++)
  , ShowS, showChar, showString
  , all, dropWhile, elem, foldr, id, map, null, replicate, shows, span
  )
import Data.Char ( Char, isSpace )
import qualified HierMod.Abs
import qualified Data.Text

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i = \case
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    [";"]        -> showChar ';'
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : ts@(p:_) | closingOrPunctuation p -> showString t . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i     = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t s =
    case (all isSpace t', null spc, null rest) of
      (True , _   , True ) -> []              -- remove trailing space
      (False, _   , True ) -> t'              -- remove trailing space
      (False, True, False) -> t' ++ ' ' : s   -- add space if none
      _                    -> t' ++ s
    where
      t'          = showString t []
      (spc, rest) = span isSpace s

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt     _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q = \case
  s | s == q -> showChar '\\' . showChar s
  '\\' -> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  s -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print HierMod.Abs.Name where
  prt _ (HierMod.Abs.Name i) = doc $ showString (Data.Text.unpack i)

instance Print HierMod.Abs.Program where
  prt i = \case
    HierMod.Abs.Prg name decls -> prPrec i 0 (concatD [doc (showString "module"), prt 0 name, doc (showString "where"), doc (showString "{"), prt 0 decls, doc (showString "}")])

instance Print HierMod.Abs.Decl where
  prt i = \case
    HierMod.Abs.Modl name decls -> prPrec i 0 (concatD [doc (showString "module"), prt 0 name, doc (showString "where"), doc (showString "{"), prt 0 decls, doc (showString "}")])
    HierMod.Abs.Opn qname importdirective -> prPrec i 0 (concatD [doc (showString "open"), prt 0 qname, prt 0 importdirective])
    HierMod.Abs.Priv decls -> prPrec i 0 (concatD [doc (showString "private"), doc (showString "{"), prt 0 decls, doc (showString "}")])

instance Print HierMod.Abs.Decls where
  prt i = \case
    HierMod.Abs.DNil -> prPrec i 0 (concatD [])
    HierMod.Abs.DSnoc decls decl -> prPrec i 0 (concatD [prt 0 decls, doc (showString ";"), prt 0 decl])

instance Print HierMod.Abs.ImportDirective where
  prt i = \case
    HierMod.Abs.ImportPrivate -> prPrec i 0 (concatD [])
    HierMod.Abs.ImportPublic -> prPrec i 0 (concatD [doc (showString "public")])
    HierMod.Abs.ImportNothing -> prPrec i 0 (concatD [doc (showString "using"), doc (showString "("), doc (showString ")")])

instance Print HierMod.Abs.QName where
  prt i = \case
    HierMod.Abs.QName name -> prPrec i 0 (concatD [prt 0 name])
    HierMod.Abs.Qual name qname -> prPrec i 0 (concatD [prt 0 name, doc (showString "."), prt 0 qname])

